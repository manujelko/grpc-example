// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SimpleChat_Ping_FullMethodName           = "/chat.SimpleChat/Ping"
	SimpleChat_UploadMessages_FullMethodName = "/chat.SimpleChat/UploadMessages"
	SimpleChat_NewsTicker_FullMethodName     = "/chat.SimpleChat/NewsTicker"
	SimpleChat_EchoChat_FullMethodName       = "/chat.SimpleChat/EchoChat"
)

// SimpleChatClient is the client API for SimpleChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleChatClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	UploadMessages(ctx context.Context, opts ...grpc.CallOption) (SimpleChat_UploadMessagesClient, error)
	NewsTicker(ctx context.Context, in *TickerRequest, opts ...grpc.CallOption) (SimpleChat_NewsTickerClient, error)
	EchoChat(ctx context.Context, opts ...grpc.CallOption) (SimpleChat_EchoChatClient, error)
}

type simpleChatClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleChatClient(cc grpc.ClientConnInterface) SimpleChatClient {
	return &simpleChatClient{cc}
}

func (c *simpleChatClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, SimpleChat_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleChatClient) UploadMessages(ctx context.Context, opts ...grpc.CallOption) (SimpleChat_UploadMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &SimpleChat_ServiceDesc.Streams[0], SimpleChat_UploadMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleChatUploadMessagesClient{stream}
	return x, nil
}

type SimpleChat_UploadMessagesClient interface {
	Send(*Message) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type simpleChatUploadMessagesClient struct {
	grpc.ClientStream
}

func (x *simpleChatUploadMessagesClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleChatUploadMessagesClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simpleChatClient) NewsTicker(ctx context.Context, in *TickerRequest, opts ...grpc.CallOption) (SimpleChat_NewsTickerClient, error) {
	stream, err := c.cc.NewStream(ctx, &SimpleChat_ServiceDesc.Streams[1], SimpleChat_NewsTicker_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleChatNewsTickerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SimpleChat_NewsTickerClient interface {
	Recv() (*NewsMessage, error)
	grpc.ClientStream
}

type simpleChatNewsTickerClient struct {
	grpc.ClientStream
}

func (x *simpleChatNewsTickerClient) Recv() (*NewsMessage, error) {
	m := new(NewsMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simpleChatClient) EchoChat(ctx context.Context, opts ...grpc.CallOption) (SimpleChat_EchoChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &SimpleChat_ServiceDesc.Streams[2], SimpleChat_EchoChat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleChatEchoChatClient{stream}
	return x, nil
}

type SimpleChat_EchoChatClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type simpleChatEchoChatClient struct {
	grpc.ClientStream
}

func (x *simpleChatEchoChatClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleChatEchoChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimpleChatServer is the server API for SimpleChat service.
// All implementations must embed UnimplementedSimpleChatServer
// for forward compatibility
type SimpleChatServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	UploadMessages(SimpleChat_UploadMessagesServer) error
	NewsTicker(*TickerRequest, SimpleChat_NewsTickerServer) error
	EchoChat(SimpleChat_EchoChatServer) error
	mustEmbedUnimplementedSimpleChatServer()
}

// UnimplementedSimpleChatServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleChatServer struct {
}

func (UnimplementedSimpleChatServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSimpleChatServer) UploadMessages(SimpleChat_UploadMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadMessages not implemented")
}
func (UnimplementedSimpleChatServer) NewsTicker(*TickerRequest, SimpleChat_NewsTickerServer) error {
	return status.Errorf(codes.Unimplemented, "method NewsTicker not implemented")
}
func (UnimplementedSimpleChatServer) EchoChat(SimpleChat_EchoChatServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoChat not implemented")
}
func (UnimplementedSimpleChatServer) mustEmbedUnimplementedSimpleChatServer() {}

// UnsafeSimpleChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleChatServer will
// result in compilation errors.
type UnsafeSimpleChatServer interface {
	mustEmbedUnimplementedSimpleChatServer()
}

func RegisterSimpleChatServer(s grpc.ServiceRegistrar, srv SimpleChatServer) {
	s.RegisterService(&SimpleChat_ServiceDesc, srv)
}

func _SimpleChat_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleChatServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleChat_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleChatServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleChat_UploadMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleChatServer).UploadMessages(&simpleChatUploadMessagesServer{stream})
}

type SimpleChat_UploadMessagesServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type simpleChatUploadMessagesServer struct {
	grpc.ServerStream
}

func (x *simpleChatUploadMessagesServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleChatUploadMessagesServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SimpleChat_NewsTicker_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TickerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimpleChatServer).NewsTicker(m, &simpleChatNewsTickerServer{stream})
}

type SimpleChat_NewsTickerServer interface {
	Send(*NewsMessage) error
	grpc.ServerStream
}

type simpleChatNewsTickerServer struct {
	grpc.ServerStream
}

func (x *simpleChatNewsTickerServer) Send(m *NewsMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _SimpleChat_EchoChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleChatServer).EchoChat(&simpleChatEchoChatServer{stream})
}

type SimpleChat_EchoChatServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type simpleChatEchoChatServer struct {
	grpc.ServerStream
}

func (x *simpleChatEchoChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleChatEchoChatServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimpleChat_ServiceDesc is the grpc.ServiceDesc for SimpleChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.SimpleChat",
	HandlerType: (*SimpleChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SimpleChat_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadMessages",
			Handler:       _SimpleChat_UploadMessages_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "NewsTicker",
			Handler:       _SimpleChat_NewsTicker_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EchoChat",
			Handler:       _SimpleChat_EchoChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
